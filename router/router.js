class Router {
    constructor() {
        this.routes = []; // M·∫£ng l∆∞u tr·ªØ c√°c object route
        this.mainContent = document.querySelector(".main-content");

        /* K√≠ch ho·∫°t khi # (hash) thay ƒë·ªïi (n√∫t Back/Forward m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát) */
        window.addEventListener(
            "hashchange",
            this._handleRouteChange.bind(this)
        );

        /* K√≠ch ho·∫°t khi m·ªói l·∫ßn t·∫£i trang */
        window.addEventListener("load", this._handleRouteChange.bind(this));
    }

    /* Th√™m route m·ªõi v√†o danh s√°ch
        - path: ƒê∆∞·ªùng d·∫´n (VD: '/playlist/:id')
        - handler: H√†m ƒë∆∞·ª£c g·ªçi khi route kh·ªõp
    */
    add(path, handler) {
        this.routes.push({ path, handler });
    }

    /* ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m·ªôt path m·ªõi
        - path: ƒê∆∞·ªùng d·∫´n ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn
    */
    navigate(path) {
        window.location.hash = path;
    }

    /* X·ª≠ l√Ω thay ƒë·ªïi route
        - T√¨m route kh·ªõp v·ªõi hash hi·ªán t·∫°i
        - G·ªçi handler t∆∞∆°ng ·ª©ng
    */
    _handleRouteChange() {
        // L·∫•y path hi·ªán t·∫°i (kh√¥ng ch·ª©a d·∫•u #)
        const currentPath = window.location.hash.slice(1) || "/";
        let found = false; // Ki·ªÉm tra xem c√≥ kh·ªõp kh√¥ng?

        for (const route of this.routes) {
            /* 
            path -> regex: X·ª≠ l√Ω tham s·ªë ƒë·ªông (:id)
            VD: [ /playlist/:id ] s·∫Ω kh·ªõp [ /playlist/123 ]
            */
            const regex = new RegExp(
                `^${route.path.replace(/:[^\s/]+/g, "([\\w-]+)")}$`
            );
            /* 
            üëâ VD: ["/user/123", "123"]
                - match[0]: Chu·ªói kh·ªõp to√†n b·ªô ("/playlist/123")
                - match[1]: Nh√≥m 1 trong regex ("123")
                - match[2]: Nh√≥m 2, n·∫øu c√≥ (v√≠ d·ª• /user/:id/:post)
            */
            const match = currentPath.match(regex);

            if (match) {
                // N·∫øu kh·ªõp, l·∫•y ra tham s·ªë t·ª´ URL
                const params = match.slice(1);

                // G·ªçi callback v·ªõi tham s·ªë l√† params
                route.handler(...params);

                // Th√¥ng b√°o kh·ªõp
                found = true;
                break;
            }
        }

        // Hi·ªÉn th·ªã l·ªói n·∫øu kh√¥ng t√¨m th·∫•y route n√†o kh·ªõp
        if (!found) {
            console.error(`No route found for path: ${currentPath}`);
        }

        // Scroll v·ªÅ ƒë·∫ßu trang m·ªói khi chuy·ªÉn trang
        this.mainContent
            .querySelector(".content-wrapper")
            .scrollTo({ top: 0, behavior: "smooth" });
    }
}

const router = new Router();
export default router;
